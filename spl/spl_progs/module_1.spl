// MODULE 1 - PROCESS MANAGER

alias functionNum R1;
alias pid R2;

// GET PCB ENTRY
if(functionNum == 1) then
  R3 = 0;
  while(R3 < MAX_PROC_NUM) do
    if([PROCESS_TABLE + R3*16 + 4] == TERMINATED) then
      [PROCESS_TABLE + R3*16 + 1] = R3;
      [PROCESS_TABLE + R3*16 + 4] = ALLOCATED;
      [PROCESS_TABLE + R3*16 + 14] = PAGE_TABLE_BASE + 20*R3;
      [PROCESS_TABLE + R3*16 + 15] = 10;
      break;
    endif;
    R3 = R3 + 1;
  endwhile;
  R0 = -1;
  if(R3 != MAX_PROC_NUM) then R0 = R3; endif;
  return;
endif;

// FREE USER AREA PAGE
if(functionNum == 2) then
  alias userAreaPage R3;
  userAreaPage = [PROCESS_TABLE + pid*16 + 11];

  // Releasing memory page
  multipush(R0, R1, R2, R3);
  R1 = 2;
  R2 = userAreaPage;
  call MOD_2;
  multipop(R0, R1, R2, R3);
  
  // Releasing semaphores and closing files
  R4 = 0;
  alias PPRT R5;
  PPRT = [PROCESS_TABLE + pid*16 + 11]*512 + 512 - 16;
  while(R4 < 8) do
    // If it is a file, close file
    if([PPRT + R4*2] == FILE) then
      multipush(R0, R1, R2, R3, R4, R5);
      R1 = 4;
      R2 = [PPRT + R4*2 + 1];
      call MOD_3;
      multipop(R0, R1, R2, R3, R4, R5);
    endif;
    // If it is a semaphore, release semaphore
    if([PPRT + R4*2] == SEMAPHORE) then
      multipush(R0, R1, R2, R3, R4, R5);
      R1 = 7;
      R3 = pid; // Arg 2 - Process id
      R2 = [PPRT + R4*2 + 1]; // Arg 1 - Semaphore id
      call MOD_0;
      multipop(R0, R1, R2, R3, R4, R5);
    endif;
    R4 = R4 + 1;
  endwhile;

  R0 = 0;
  return;
endif;

// EXIT PROCESS
if(functionNum == 3) then
  // If call not from exec sys call
  if([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] != 9) then
    R3 = 0;
    while(R3 < MAX_PROC_NUM) do
      // If a process is waiting for this process, then set it to READY
      if([PROCESS_TABLE + R3*16 + 4] == WAIT_PROCESS && [PROCESS_TABLE + R3*16 + 5]  ==[SYSTEM_STATUS_TABLE + 1]) then
        [PROCESS_TABLE + R3*16 + 4] = READY;
      endif;
      // If a process is the child of this process, then make it orphan
      if([PROCESS_TABLE + R3*16 + 2] == [SYSTEM_STATUS_TABLE + 1]) then
        [PROCESS_TABLE + R3*16 + 2] = -1;
      endif;
      R3 = R3 + 1;
    endwhile;
  endif;

  // Freeing page table
  multipush(R0, R1, R2);
  R1 = 4;
  R2 = pid;
  call MOD_1;
  multipop(R0, R1, R2);

  // Freeing user area page
  multipush(R0, R1, R2);
  R1 = 2;
  R2 = pid;
  call MOD_1;
  multipop(R0, R1, R2);

  // Setting process state
  [PROCESS_TABLE + pid*16 + 4] = TERMINATED;

  return;
endif;

// FREE PAGE TABLE
if(functionNum == 4) then
  // Setting library pages as invalid
  [PAGE_TABLE_BASE + pid*20 + 0] = -1;
  [PAGE_TABLE_BASE + pid*20 + 1] = "0000";
  [PAGE_TABLE_BASE + pid*20 + 2] = -1;
  [PAGE_TABLE_BASE + pid*20 + 3] = "0000";

  alias i R3;
  i = 2;
  while(i < 10) do
    if([PAGE_TABLE_BASE + pid*20 + 2*i] != -1) then
      // Releasing page
      multipush(R0, R1, R2, R3);
      R1 = 2;
      R2 = [PAGE_TABLE_BASE + pid*20 + 2*i];
      call MOD_2;
      multipop(R0, R1, R2, R3);
      [PAGE_TABLE_BASE + pid*20 + 2*i] = -1;
      [PAGE_TABLE_BASE + pid*20 + 2*i + 1] = "0000";
    endif;
    i = i + 1;
  endwhile;

  // Releasing stack and heap pages saved on disk
  i = 2;
  while(i <= 9) do
    if([DISK_MAP_TABLE + pid*10 + i] != -1) then
      if(i == 2 || i == 3 || i == 8 || i == 9) then
        // Release block
        multipush(R0, R1, R2);
        R4 = pid;
        R1 = 4;
        R2 = [DISK_MAP_TABLE + R4*10 + i];
        R3 = R4;
        
        call MOD_2;
        multipop(R0, R1, R2);
      endif;
      [DISK_MAP_TABLE + pid*10 + i] = -1;
    endif;
    i = i + 1;
  endwhile;
  return;
endif;

// KILL ALL
if(functionNum == 5) then
  // Acquring all inodes
  R3 = 0;
  while(R3 < MAX_FILE_NUM) do
    if([INODE_TABLE + R3*16 + 1] != -1) then
      multipush(R0, R1, R2, R3);
      R1 = ACQUIRE_INODE;
      R4 = R3;
      R3 = pid;
      R2 = R4;
      call MOD_0;
      multipop(R0, R1, R2, R3);
    endif;
    R3 = R3 + 1;
  endwhile;

  // Exiting all process except idle, init and current process
  R3 = 2;
  while(R3 < MAX_PROC_NUM) do
    if(R3 == SWAPPER_DAEMON) then
      R3 = R3 + 1;
      continue;
    endif;
    
    if(R3 != pid && [PROCESS_TABLE + R3*16 + 4] != TERMINATED) then
      // Calling exit process
      multipush(R0, R1, R2, R3);
      R1 = EXIT_PROCESS;
      R2 = R3;
      call MOD_1;
      multipop(R0, R1, R2, R3);
    endif;

    R3 = R3 + 1;
  endwhile;

  // Releasing all inodes
  R3 = 0;
  while(R3 < MAX_FILE_NUM) do
    if([INODE_TABLE + R3*16 + 1] != -1) then
      multipush(R0, R1, R2, R3);
      R1 = RELEASE_INODE;
      R4 = R3;
      R3 = pid;
      R2 = R4;
      call MOD_0;
      multipop(R0, R1, R2, R3);
    endif;
    R3 = R3 + 1;
  endwhile;

  return;
endif;