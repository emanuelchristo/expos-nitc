// Loading library code
loadi(63,13);
loadi(64,14);

// Loading idle program
loadi(69, 11);
loadi(70, 12);

// Loading init program
loadi(65,7);
loadi(66,8);


// Loading INT10 module
loadi(22,35);
loadi(23,36);

// Loading INT7 module
loadi(16,29);
loadi(17,30);

// Loading exception handler
loadi(2, 15);
loadi(3, 16);

// Loading timer interrupt handler
loadi(4, 17);
loadi(5, 18);

// PAGE TABLE SETUP

// IDLE PROCESS
//Library
[PAGE_TABLE_BASE+0] = 63;
[PAGE_TABLE_BASE+1] = "0100";
[PAGE_TABLE_BASE+2] = 64;
[PAGE_TABLE_BASE+3] = "0100";

//Heap
[PAGE_TABLE_BASE+4] = -1;
[PAGE_TABLE_BASE+5] = "0000";
[PAGE_TABLE_BASE+6] = -1;
[PAGE_TABLE_BASE+7] = "0000";

//Code
[PAGE_TABLE_BASE+8] = 69;
[PAGE_TABLE_BASE+9] = "0100";
[PAGE_TABLE_BASE+10] = 70;
[PAGE_TABLE_BASE+11] = "0100";
[PAGE_TABLE_BASE+12] = -1;
[PAGE_TABLE_BASE+13] = "0000";
[PAGE_TABLE_BASE+14] = -1;
[PAGE_TABLE_BASE+15] = "0000";

//Stack
[PAGE_TABLE_BASE+16] = 81;
[PAGE_TABLE_BASE+17] = "0110";
[PAGE_TABLE_BASE+18] = -1;
[PAGE_TABLE_BASE+19] = "0000";

// INIT PROCESS
// Library
[PAGE_TABLE_BASE+20] = 63;
[PAGE_TABLE_BASE+21] = "0100";
[PAGE_TABLE_BASE+22] = 64;
[PAGE_TABLE_BASE+23] = "0100";

// Heap
[PAGE_TABLE_BASE+24] = 78;
[PAGE_TABLE_BASE+25] = "0110";
[PAGE_TABLE_BASE+26] = 79;
[PAGE_TABLE_BASE+27] = "0110";

// Code
[PAGE_TABLE_BASE+28] = 65;
[PAGE_TABLE_BASE+29] = "0100";
[PAGE_TABLE_BASE+30] = 66;
[PAGE_TABLE_BASE+31] = "0100";
[PAGE_TABLE_BASE+32] = -1;
[PAGE_TABLE_BASE+33] = "0000";
[PAGE_TABLE_BASE+34] = -1;
[PAGE_TABLE_BASE+35] = "0000";

// Stack
[PAGE_TABLE_BASE+36] = 76;
[PAGE_TABLE_BASE+37] = "0110";
[PAGE_TABLE_BASE+38] = 77;
[PAGE_TABLE_BASE+39] = "0110";


// PROCESS TABLE SETUP

// IDLE PROCESS
[PROCESS_TABLE + 1] = 0;
[PROCESS_TABLE + 4] = CREATED;
[PROCESS_TABLE + 11] = 82;
[PROCESS_TABLE + 12] = 0;
[PROCESS_TABLE + 13] = 8*512;
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE;
[PROCESS_TABLE + 15] = 10;


// INIT PROCESS
[PROCESS_TABLE + 17] = 1;
[PROCESS_TABLE + 20] = RUNNING;
[PROCESS_TABLE + 27] = 80;
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 29] = 8*512;
[PROCESS_TABLE + 30] = PAGE_TABLE_BASE + 16;
[PROCESS_TABLE + 31] = 10;

// Set entry point IP value from header of INIT process to top of user stack
[76 * 512] = [65*512 + 1];

// Set entry point IP value from header of IDLE process to top of user stack
[81 * 512] = [69*512 + 1];

// REGISTERS SETUP
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;
SP = 8*512;

// Current process ID
[SYSTEM_STATUS_TABLE + 1] = 1;

ireturn;