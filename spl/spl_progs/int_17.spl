// INT 17 - LOGIN

alias sysCallNum R0;
alias username R1;
alias password R2;
alias retAddr R3;

// Extracting arguments from stack
sysCallNum = [[PTBR + 2*(SP-5)/512]*512 + (SP-5)%512];
username = [[PTBR + 2*(SP-4)/512]*512 + (SP-4)%512];
password = [[PTBR + 2*(SP-3)/512]*512 + (SP-3)%512];
retAddr = [PTBR + 2*(SP-1)/512]*512 + (SP-1)%512;

alias processTableEntry R4;
processTableEntry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

// Setting mode flag
[processTableEntry + 9] = sysCallNum;

// Switching to kernel stack
[processTableEntry + 13] = SP;
SP = [processTableEntry + 11]*512 - 1;

// If current process is not init
if([SYSTEM_STATUS_TABLE + 1] != 1) then
  [retAddr] = -2;
  // Returning to user process
  [processTableEntry + 9] = 0;
  SP = [processTableEntry + 13];
  ireturn;
endif;

// Finding user entry
R5 = 0;
while(R5 < MAX_USER_NUM) do
  if([USER_TABLE + R5*2] == username) then
    break;
  endif;
  R5 = R5 + 1;
endwhile;

// No user with given username
if(R5 == MAX_USER_NUM) then
  [retAddr] = -1;
  // Returning to user process
  [processTableEntry + 9] = 0;
  SP = [processTableEntry + 13];
  ireturn;
endif;

alias userId R5;

encrypt password;

if([USER_TABLE + userId*2 + 1] != password) then
  [retAddr] = -1;
  // Returning to user process
  [processTableEntry + 9] = 0;
  SP = [processTableEntry + 13];
  ireturn;
endif;


// Setting process table of shell
[PROCESS_TABLE + 2*16 + 4] = CREATED;
[PROCESS_TABLE + 2*16 + 3] = userId;

// Setting login process to wait for shell to exit
[processTableEntry + 4] = WAIT_PROCESS;
[processTableEntry + 5] = 2;

// Setting system status table current user id
[SYSTEM_STATUS_TABLE] = userId;

multipush(R3,R4);
call MOD_5;
multipop(R3,R4);

[retAddr] = 0;
// Returning to user process
[processTableEntry + 9] = 0;
SP = [processTableEntry + 13];
ireturn;


