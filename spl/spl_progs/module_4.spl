// DEVICE MANAGER - MODULE 4

alias functionNum R1;
alias currentPID R2;

// Disk Load
if(functionNum == 2) then
	// Acquring disk
	multipush(R0, R1, R2, R3, R4);
	R1 = 3;
	R2 = currentPID;
	call MOD_0;
	multipop(R0, R1, R2, R3, R4);

	[DISK_STATUS_TABLE + 1] = 0;
	[DISK_STATUS_TABLE + 2] = R3;
	[DISK_STATUS_TABLE + 3] = R4;
	[DISK_STATUS_TABLE + 4] = R2;

	load(R3, R4);

	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_DISK;

	// Scheduler
	multipush(R1, R2, R3, R4);
	call MOD_5;
	multipop(R1, R2, R3, R4);

	return;
endif;


// Terminal Write
if(functionNum == 3) then
	// Acquring terminal
	multipush(R1, R2, R3);
	R1 = 8;
	R2 = currentPID;
	call MOD_0;
	multipop(R1, R2, R3);

	print R3;

	// Releasing terminal
	multipush(R1, R2, R3);
	R1 = 9;
	R2 = currentPID;
	call MOD_0;
	multipop(R1, R2, R3);

	return;
endif;


// Terminal Read
if(functionNum == 4) then
	// Acquring terminal
	multipush(R1, R2, R3);
	R1 = 8;
	R2 = currentPID;
	call MOD_0;
	multipop(R1, R2, R3);

	read;

	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_TERMINAL;

	// Scheduler
	multipush(R1, R2, R3);
	call MOD_5;
	multipop(R1, R2, R3);

	alias dataWordPhyAddr R4;
	// Data word physical address
	dataWordPhyAddr = [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 2*R3/512]*512 + R3%512;

	// Saving input buffer to word
	[dataWordPhyAddr] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 8];

	return;
endif;