// Loading library
loadi(63,13);
loadi(64,14);

// Loading init program
loadi(65,7);
loadi(66,8);

// Loading even_num program
loadi(85,69);

// Loading primes program
loadi(90,70);

// Loading INT7 module
loadi(16,29);
loadi(17,30);

// Loading INT10 module
loadi(22,35);
loadi(23,36);

// Loading exception handler
loadi(2, 15);
loadi(3, 16);

// Loading timer interrupt handler
loadi(4, 17);
loadi(5, 18);

// Loading scheduler module
loadi(50,63);
loadi(51,64);

// SETTING UP INIT PROCESS
// Page table setup
// Library
alias temp R0;
temp = PAGE_TABLE_BASE + 20;
[temp + 0] = 63;
[temp + 1] = "0100";
[temp + 2] = 64;
[temp + 3] = "0100";

// Heap
[temp + 4] = 78;
[temp + 5] = "0110";
[temp + 6] = 79;
[temp + 7] = "0110";

// Code
[temp + 8] = 65;
[temp + 9] = "0100";
[temp + 10] = 66;
[temp + 11] = "0100";
[temp + 12] = -1;
[temp + 13] = "0000";
[temp + 14] = -1;
[temp + 15] = "0000";

// Stack
[temp + 16] = 76;
[temp + 17] = "0110";
[temp + 18] = 77;
[temp + 19] = "0110";

// Process table setup for init process
temp = PROCESS_TABLE + 16;
[temp + 1] = 1;
[temp + 4] = CREATED;
[temp + 11] = 80;
[temp + 12] = 0;
[temp + 13] = 8*512;
[temp + 14] = PAGE_TABLE_BASE + 20;
[temp + 15] = 10;

// Set entry point IP value from header of INIT process to top of user stack
[76 * 512] = [65*512 + 1];

// SETTING UP even_num PROCESS
// Page table setup
// Library
temp = PAGE_TABLE_BASE + 40;
[temp + 0] = 63;
[temp + 1] = "0100";
[temp + 2] = 64;
[temp + 3] = "0100";

// Heap
[temp + 4] = 83;
[temp + 5] = "0110";
[temp + 6] = 84;
[temp + 7] = "0110";

// Code
[temp + 8] = 85;
[temp + 9] = "0100";
[temp + 10] = -1;
[temp + 11] = "0000";
[temp + 12] = -1;
[temp + 13] = "0000";
[temp + 14] = -1;
[temp + 15] = "0000";

// Stack
[temp + 16] = 87;
[temp + 17] = "0110";
[temp + 18] = 88;
[temp + 19] = "0110";

// Process table setup for init process
temp = PROCESS_TABLE + 32;
[temp + 1] = 2;
[temp + 4] = CREATED;
[temp + 11] = 89;
[temp + 12] = 0;
[temp + 13] = 8*512;
[temp + 14] = PAGE_TABLE_BASE + 40;
[temp + 15] = 10;

// Set entry point IP value from header of INIT process to top of user stack
[87 * 512] = [85*512 + 1];

// SETTING UP primes PROCESS
// Page table setup
// Library
temp = PAGE_TABLE_BASE + 60;
[temp + 0] = 63;
[temp + 1] = "0100";
[temp + 2] = 64;
[temp + 3] = "0100";

// Heap
[temp + 4] = 91;
[temp + 5] = "0110";
[temp + 6] = 92;
[temp + 7] = "0110";

// Code
[temp + 8] = 90;
[temp + 9] = "0100";
[temp + 10] = -1;
[temp + 11] = "0000";
[temp + 12] = -1;
[temp + 13] = "0000";
[temp + 14] = -1;
[temp + 15] = "0000";

// Stack
[temp + 16] = 93;
[temp + 17] = "0110";
[temp + 18] = 94;
[temp + 19] = "0110";

// Process table setup for init process
temp = PROCESS_TABLE + 48;
[temp + 1] = 3;
[temp + 4] = CREATED;
[temp + 11] = 95;
[temp + 12] = 0;
[temp + 13] = 8*512;
[temp + 14] = PAGE_TABLE_BASE + 60;
[temp + 15] = 10;

// Set entry point IP value from header of INIT process to top of user stack
[93 * 512] = [90*512 + 1];

// Setting all other processes to terminated
alias i R1;
i = 4;
while (i < MAX_PROC_NUM) do
  temp = PROCESS_TABLE + i*16;
  [temp + 4] = TERMINATED;
  i = i + 1;
endwhile;

return;