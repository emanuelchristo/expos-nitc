// MODULE 7 - BOOT MODULE

// LOADING USER PROGRAMS ---------------------

// Loading library
loadi(63,13);
loadi(64,14);

// Loading init program
loadi(65,7);
loadi(66,8);

// Loading even_num program
loadi(85,69);

// Loading primes program
loadi(90,70);

// LOADING INTERRUPTS ---------------------

// Loading INT 4 - Create, Delete
loadi(10,23);
loadi(11,24);

// Loading INT 5 - Open, Close
loadi(12,25);
loadi(13,26);

// Loading INT 6 - Read
loadi(14,27);
loadi(15,28);

// Loading INT 7 - Write
loadi(16,29);
loadi(17,30);

// Loading INT 8 - Fork
loadi(18,31);
loadi(19,32);

// Loading INT 9 - Exec
loadi(20,33);
loadi(21,34);

// Loading INT 10 - Exit
loadi(22,35);
loadi(23,36);

// Loading INT 11 - Getpid, Getppid, Wait, Signal
loadi(24,37);
loadi(25,38);

// Loading INT 13 - Semget, Semrelease
loadi(28,41);
loadi(29,42);

// Loading INT 14 - Semlock, Semunlock
loadi(30,43);
loadi(31,44);

// Loading INT 15 - Shutdown
loadi(32,45);
loadi(33,46);

// Loading INT - Exception
loadi(2, 15);
loadi(3, 16);

// Loading INT - Timer
loadi(4, 17);
loadi(5, 18);

// Loading INT - Disk
loadi(6, 19);
loadi(7, 20);

// Loading INT - Console
loadi(8, 21);
loadi(9, 22);

// LOADING MODULES ---------------------

// Loading Module 0 - Resource Manager
loadi(40,53);
loadi(41,54);

// Loading Module 1 - Process Manager
loadi(42,55);
loadi(43,56);

// Loading Module 2 - Memory Manager
loadi(44,57);
loadi(45,58);

// Loading Module 3 - File Manager
loadi(46,59);
loadi(47,60);

// Loading Module 4 - Device Manager
loadi(48,61);
loadi(49,62);

// Loading Module 5 - Scheduler
loadi(50,63);
loadi(51,64);

// Loading inode + user table
loadi(59,3);
loadi(60,4);

// Loading disk free list
loadi(61, 2);



// SETTING UP INIT PROCESS
// Page table setup
alias temp R0;
temp = PAGE_TABLE_BASE + 20;
// Library
[temp + 0] = 63;
[temp + 1] = "0100";
[temp + 2] = 64;
[temp + 3] = "0100";

// Heap
[temp + 4] = 78;
[temp + 5] = "0110";
[temp + 6] = 79;
[temp + 7] = "0110";

// Code
[temp + 8] = 65;
[temp + 9] = "0100";
[temp + 10] = 66;
[temp + 11] = "0100";
[temp + 12] = -1;
[temp + 13] = "0000";
[temp + 14] = -1;
[temp + 15] = "0000";

// Stack
[temp + 16] = 76;
[temp + 17] = "0110";
[temp + 18] = 77;
[temp + 19] = "0110";

// Process table setup for init process
temp = PROCESS_TABLE + 16;
[temp + 1] = 1;
[temp + 3] = 1; // User id
[temp + 4] = CREATED;
[temp + 11] = 80;
[temp + 12] = 0;
[temp + 13] = 8*512;
[temp + 14] = PAGE_TABLE_BASE + 20;
[temp + 15] = 10;

// Disk map table setup for init process
// Setting up disk map table
[DISK_MAP_TABLE + 10 + 2] = -1;
[DISK_MAP_TABLE + 10 + 3] = -1;
[DISK_MAP_TABLE + 10 + 4] = 7;
[DISK_MAP_TABLE + 10 + 5] = 8;
[DISK_MAP_TABLE + 10 + 6] = -1;
[DISK_MAP_TABLE + 10 + 7] = -1;
[DISK_MAP_TABLE + 10 + 8] = -1;
[DISK_MAP_TABLE + 10 + 9] = -1;

// Setting per process resource table
R7 = 0;
while(R7 < 8) do
  [80*512 + 510 - R7*2] = -1;
  R7 = R7 + 1;
endwhile;

// Set entry point IP value from header of INIT process to top of user stack
[76 * 512] = [65*512 + 1];


// Setting all other processes to terminated
alias i R1;
i = 2;
while (i < MAX_PROC_NUM) do
  temp = PROCESS_TABLE + i*16;
  [temp + 4] = TERMINATED;
  i = i + 1;
endwhile;

// Setting semaphore table
i = 0;
while(i < MAX_SEM_COUNT) do
  [SEMAPHORE_TABLE + i*4 + 0] = -1;
  [SEMAPHORE_TABLE + i*4 + 1] = 0;
  [SEMAPHORE_TABLE + i*4 + 2] = -1;
  [SEMAPHORE_TABLE + i*4 + 3] = -1;
  i = i + 1;
endwhile;


// Setting memory free list
i = 0;
alias freeMem R0;
freeMem = 0;
while(i < 128) do
  if(i >= 83 && i <= 127) then
    [MEMORY_FREE_LIST + i] = 0;
    freeMem = freeMem + 1;
  else
    [MEMORY_FREE_LIST + i] = 1;
  endif;
  i = i + 1;
endwhile;

// Initializing file status table
i = 0;
while(i < MAX_FILE_NUM) do
  [FILE_STATUS_TABLE + i*4 + 0] = -1;
  [FILE_STATUS_TABLE + i*4 + 1] = -1;
  i = i + 1;
endwhile;

// Initializing buffer table
i = 0;
while(i < MAX_BUFFER) do
  [BUFFER_TABLE + i*4 + 0] = -1;
  [BUFFER_TABLE + i*4 + 1] = 0;
  [BUFFER_TABLE + i*4 + 2] = -1;
  i = i + 1;
endwhile;

// Initializing open file table
i = 0;
while(i < MAX_OPENFILE_NUM) do
  [OPEN_FILE_TABLE + i*4] = -1;
  [OPEN_FILE_TABLE + i*4 + 1] = 0;
  i = i + 1;
endwhile;

// Setting WAIT_MEM_COUNT
[SYSTEM_STATUS_TABLE + 3] = 0;
// Setting MEM_FREE_COUNT
[SYSTEM_STATUS_TABLE + 2] = freeMem;

[SYSTEM_STATUS_TABLE + 6] = 0;
[SYSTEM_STATUS_TABLE + 7] = 0;

// Setting up Disk Status table
[DISK_STATUS_TABLE + 0] = 0;

return;