// INT 14 - SEMLOCK, SEMUNLOCK

alias sysCallNum R0;
alias arg1 R1;
alias retAddr R2;

// Extracting arguments from stack
sysCallNum = [[PTBR + 2*(SP-5)/512]*512 + (SP-5)%512];
arg1 = [[PTBR + 2*(SP-4)/512]*512 + (SP-4)%512];
retAddr = [PTBR + 2*(SP-1)/512]*512 + (SP-1)%512;

// Setting mode flag
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = sysCallNum;

// Switching to kernel stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;


// SEMLOCK
if(sysCallNum == 19) then
  alias PPRT R3;
  PPRT = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 + 512 - 16;

  // If semaphore descriptor arg is invalid
  if(arg1 < 0 || arg1 >= 8 || [PPRT + arg1*2] != SEMAPHORE) then
    [retAddr] = -1;
    // Setting mode flag
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
    // Switching to kernel stack
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
    ireturn;
  endif;
    
  // If semaphore is locked by some other process
  while([SEMAPHORE_TABLE + [PPRT + arg1*2 + 1]*4] != -1 && [SEMAPHORE_TABLE + [PPRT + arg1*2 + 1]*4] != [SYSTEM_STATUS_TABLE + 1]) do
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_SEMAPHORE;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 5] = [PPRT + arg1*2 + 1];
    // Calling scheduler
    multipush(R0, R1, R2, R3);
    call MOD_5;
    multipop(R0, R1, R2, R3);
  endwhile;

  // Setting locking pid of semaphore
  [SEMAPHORE_TABLE + [PPRT + arg1*2 + 1]*4] = [SYSTEM_STATUS_TABLE + 1];

  [retAddr] = 0;
  // Setting mode flag
  [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
  // Switching to kernel stack
  SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
  ireturn;
endif;

// SEMUNLOCK
if(sysCallNum == 20) then
  alias PPRT R3;
  PPRT = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 + 512 - 16;

  // If semaphore descriptor arg is invalid
  if(arg1 < 0 || arg1 >= 8 || [PPRT + arg1*2] != SEMAPHORE) then
    [retAddr] = -1;
    // Setting mode flag
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
    // Switching to kernel stack
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
    ireturn;
  endif;

  // If semaphore is locked by some other process
  if([SEMAPHORE_TABLE + [PPRT + arg1*2 + 1]*4] != [SYSTEM_STATUS_TABLE + 1]) then
    [retAddr] = -2;
    // Setting mode flag
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
    // Switching to kernel stack
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
    ireturn;
  endif;

  // Unlocking semaphore
  [SEMAPHORE_TABLE + [PPRT + arg1*2 + 1]*4] = -1;
  
  // Readying processes waiting for the semaphore
  R4 = 0;
  while(R4 < MAX_PROC_NUM) do
    if([PROCESS_TABLE + R4*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + R4*16 + 5] == [PPRT + arg1*2 + 1]) then
      [PROCESS_TABLE + R4*16 + 4] = READY;
      [PROCESS_TABLE + R4*16 + 5] = -1;
    endif;
    R4 = R4 + 1;
  endwhile;

  [retAddr] = 0;
  // Setting mode flag
  [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
  // Switching to kernel stack
  SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
  ireturn;
endif;