// RESOURCE MANAGER - MODULE 0

// ACQUIRE DISK
if(R1 == 3) then
  // Disk in use
  if([DISK_STATUS_TABLE + 0] == 1) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_DISK;
    multipush(R0, R1, R2);
    call MOD_5;
    multipop(R0, R1, R2);
  endif;
  
  // Status
  [DISK_STATUS_TABLE + 0] = 1;
  // PID
  [DISK_STATUS_TABLE + 4] = R2;
  
  return;
endif;

// ACQUIRE INODE
if(R1 == 4) then
  alias inodeIndex R2;
  alias pid R3;

  // If file is locked by some other process - wait in busy loop
  while([FILE_STATUS_TABLE + inodeIndex*4 + 0] != -1) do
    [PROCESS_TABLE + pid*16 + 4] = WAIT_FILE;
    [PROCESS_TABLE + pid*16 + 5] = inodeIndex;
    multipush(R0, R1, R2, R3);
    call MOD_5;
    multipop(R0, R1, R2, R3);
  endwhile;

  // File already deleted
  if([INODE_TABLE + inodeIndex*16 + 1] == -1) then
    R0 = -1;
    return;
  endif;

  // Locking the file
  [FILE_STATUS_TABLE + inodeIndex*4 + 0] = pid;

  R0 = 0;
  return;
endif;

// RELEASE INODE
if(R1 == 5) then
  alias inodeIndex R2;
  alias pid R3;

  // If given pid is not the locking pid
  if([FILE_STATUS_TABLE + inodeIndex*4 + 0] != pid) then
    R0 = -1;
    return;
  endif;

  // Freeing the lock
  [FILE_STATUS_TABLE + inodeIndex*4 + 0] = -1;

  // Waking up processes waiting for the inode
  R4 = 0;
  while(R4 < MAX_PROC_NUM) do
    if([PROCESS_TABLE + R4*16 + 4] == WAIT_FILE && [PROCESS_TABLE + R4*16 + 5] == inodeIndex) then
      [PROCESS_TABLE + R4*16 + 4] = READY;
    endif;
    R4 = R4 + 1;
  endwhile;

  R0 = 0;
  return;
endif;

// ACQUIRE SEMAPHORE
if (R1 == 6) then
  alias pid R2;

  // Searching for free entry
  R3 = 0;
  while(R3 < MAX_SEM_COUNT) do
    // If process count is 0 - means free entry
    if([SEMAPHORE_TABLE + R3*4 + 1] == 0) then
      [SEMAPHORE_TABLE + R3*4 + 0] = -1;
      [SEMAPHORE_TABLE + R3*4 + 1] = 1;
      break;
    endif;
    R3 = R3 + 1;
  endwhile;

  // If no free entry
  if(R3 == MAX_SEM_COUNT) then 
    R0 = -1;
  else
    R0 = R3;
  endif;
  return;
endif;

// RELEASE SEMAPHORE
if (R1 == 7) then
  alias pprtIndex R2;
  alias pid R3;
  alias PPRT R4;
  alias semIndex R5;
  PPRT = [PROCESS_TABLE + pid*16 + 11]*512 + 512 - 16;
  semIndex = [PPRT + pprtIndex*2 + 1];
  if([SEMAPHORE_TABLE + 4*semIndex] == pid) then
    // Unlocking semaphore
    [SEMAPHORE_TABLE + 4*semIndex] = -1;

    // Waking up processes waiting for this semaphore
    R6 = 0;
    while(R6 < MAX_PROC_NUM) do
      if([PROCESS_TABLE + R6*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + R6*16 + 5] == semIndex) then
        [PROCESS_TABLE + R6*16 + 4] = READY;
        [PROCESS_TABLE + R6*16 + 5] = -1;
      endif;
      R6 = R6 + 1;
    endwhile;
  endif;

  // Decrementing process count
  [SEMAPHORE_TABLE + 4*semIndex + 1] = [SEMAPHORE_TABLE + 4*semIndex + 1] - 1;

  R0 = 0;
  return;
endif;

// ACQUIRE TERMINAL
if (R1 == 8) then
  // Terminal in use
  if([TERMINAL_STATUS_TABLE + 0] == 1) then
    alias currentPID R2;
    alias process_table_entry R0;
    currentPID = [SYSTEM_STATUS_TABLE + 1];
    process_table_entry = PROCESS_TABLE + currentPID*16;
    [process_table_entry + 4] = WAIT_TERMINAL;
    multipush(R0, R1, R2, R3);
    call MOD_5;
    multipop(R0, R1, R2, R3);
  endif;
  [TERMINAL_STATUS_TABLE + 0] = 1;
  [TERMINAL_STATUS_TABLE + 1] = [SYSTEM_STATUS_TABLE + 1];
  return;
endif;

// RELEASE TERMINAL
if (R1 == 9) then
  // Checking if process requesting release is the same process who has the terminal
  if ([TERMINAL_STATUS_TABLE + 1] != R2) then
    R0 = -1;
    return;
  endif;
  [TERMINAL_STATUS_TABLE + 0] = 0;

  alias i R5;
  i = 0;
  while (i < MAX_PROC_NUM) do
    if([PROCESS_TABLE + i*16 + 1] != -1 && [PROCESS_TABLE + i*16 + 4] == WAIT_TERMINAL) then
      [PROCESS_TABLE + i*16 + 4] = READY;
    endif;
    i = i + 1;
  endwhile;

  R0 = 0;
  return;
endif;