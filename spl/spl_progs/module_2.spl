// MODULE 2 - MEMORY MANAGER

alias functionNum R1;

// GET FREE PAGE
if(functionNum == 1) then
  // Increment wait mem count
  [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

  // If mem free count is 0
  if([SYSTEM_STATUS_TABLE + 2] == 0) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_MEM;
    multipush(R0, R1);
    call MOD_5;
    multipop(R0, R1);
  endif;

  // Decrement wait mem count
  [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
  // Decrement mem free count
  [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

  // Finding free memory page
  R0 = 0;
  while(R0 < 128) do
    if([MEMORY_FREE_LIST + R0] == 0) then
      [MEMORY_FREE_LIST + R0] = 1;
      break;
    endif;
    R0 = R0 + 1;
  endwhile;

  return;
endif;

// RELEASE PAGE
if(functionNum == 2) then
  [MEMORY_FREE_LIST + R2] = [MEMORY_FREE_LIST + R2] - 1;
  if([MEMORY_FREE_LIST + R2] == 0) then
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
  endif;

  // Setting WAIT_MEM processes to ready
  alias i R3;
  i = 0;
  while(i < MAX_PROC_NUM) do
    if([PROCESS_TABLE + i*16 + 1] != -1 && [PROCESS_TABLE + i*16 + 4] == WAIT_MEM) then
      [PROCESS_TABLE + i*16 + 4] = READY;
    endif;
    i = i + 1;
  endwhile;

  return;
endif;

// RELEASE block
if(functionNum == 4) then
  alias blockNum R2;
  [DISK_FREE_LIST + blockNum] = [DISK_FREE_LIST + blockNum] - 1;
  return;
endif;

// GET CODE PAGE
if(functionNum == 5) then
  alias blockNumber R2;

  // Searching disk map table for the given block number
  R3 = 0;
  while(R3 < MAX_PROC_NUM*10) do
    if([DISK_MAP_TABLE + R3] == blockNumber) then
      break;
    endif;
    R3 = R3 + 1;
  endwhile;

  // Code page found
  if(R3 != MAX_PROC_NUM*10) then
    // Page num of block found
    R0 = [PAGE_TABLE_BASE + (R3/10)*20 + (R3%10)*2];
    [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
    return;
  endif;

  // Getting a free page
  multipush(R0, R1, R2);
  R1 = 1;
  call MOD_2;
  alias newPage R4;
  newPage = R0;
  multipop(R0, R1, R2);

  // Disk Load
  multipush(R0, R1, R2, R3, R4);
  R3 = newPage;
  R4 = blockNumber;
  R1 = 2;
  R2 = [SYSTEM_STATUS_TABLE + 1];
  call MOD_4;
  multipop(R0, R1, R2, R3, R4);

  R0 = newPage;

  breakpoint;

  return;
endif;