// INT 4 - CREATE, DELETE

alias sysCallNum R0;
alias fileName R1;
alias permission R2;
alias retAddr R3;

// Extracting arguments from stack
sysCallNum = [[PTBR + 2*(SP-5)/512]*512 + (SP-5)%512];
fileName = [[PTBR + 2*(SP-4)/512]*512 + (SP-4)%512];
permission = [[PTBR + 2*(SP-3)/512]*512 + (SP-3)%512];
retAddr = [PTBR + 2*(SP-1)/512]*512 + (SP-1)%512;

alias processTableEntry R4;
processTableEntry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

// Setting mode flag
[processTableEntry + 9] = sysCallNum;

// Switching to kernel stack
[processTableEntry + 13] = SP;
SP = [processTableEntry + 11]*512 - 1;

// CREATE
if(sysCallNum == 1) then
  // Checking if file already exists
  R5 = 0;
  while(R5 < MAX_FILE_NUM) do
    if([INODE_TABLE + R5*16 + 1] == fileName) then
      [retAddr] = 0;
      // Returning to user process
      [processTableEntry + 9] = 0;
      SP = [processTableEntry + 13];
      ireturn;
    endif;
    R5 = R5 + 1;
  endwhile;

  // Finding free entry in inode table
  R5 = 0;
  while(R5 < MAX_FILE_NUM) do
    if([INODE_TABLE + R5*16 + 1] == -1) then
      break;
    endif;
    R5 = R5 + 1;
  endwhile;

  // If no free entry
  if(R5 == MAX_FILE_NUM) then
    [retAddr] = -1;
    // Returning to user process
    [processTableEntry + 9] = 0;
    SP = [processTableEntry + 13];
    ireturn;
  endif;

  
  alias inodeTableEntry R5;
  alias rootFileEntry R6;
  alias userId R7;
  rootFileEntry = ROOT_FILE + R5*8;
  inodeTableEntry = INODE_TABLE + R5*16;
  userId = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 3];

  [inodeTableEntry + 0] = DATA; // File type
  [inodeTableEntry + 1] = fileName; // File name
  [inodeTableEntry + 2] = 0; // File size
  [inodeTableEntry + 3] = userId; // User id
  [inodeTableEntry + 4] = permission; // Permission
  [inodeTableEntry + 8] = -1; // Disk block 1
  [inodeTableEntry + 9] = -1; // Disk block 2
  [inodeTableEntry + 10] = -1; // Disk block 3
  [inodeTableEntry + 11] = -1; // Disk block 4

  [rootFileEntry + 0] = fileName; // File name
  [rootFileEntry + 1] = 0; // File size
  [rootFileEntry + 2] = DATA; // File type
  [rootFileEntry + 3] = [USER_TABLE + 2*userId]; // Username
  [rootFileEntry + 4] = permission; // Permission


  [retAddr] = 0;
  // Returning to user process
  [processTableEntry + 9] = 0;
  SP = [processTableEntry + 13];
  ireturn;
endif;

// DELETE
if(sysCallNum == 4) then
  // Checking if file exists
  R5 = 0;
  while(R5 < MAX_FILE_NUM) do
    if([INODE_TABLE + R5*16 + 1] == fileName) then
      break;
    endif;
    R5 = R5 + 1;
  endwhile;

  // If file not found
  if(R5 == MAX_FILE_NUM) then
    [retAddr] = 0;
    // Returning to kernel process
    [processTableEntry + 9] = 0;
    SP = [processTableEntry + 13];
    ireturn;
  endif;

  alias inodeTableEntry R5;
  alias inodeIndex R6;
  inodeIndex = R5;
  inodeTableEntry = INODE_TABLE + R5*16;

  // If file is not of type DATA
  if([inodeTableEntry] != DATA) then
    [retAddr] = -1;
    // Returning to user process
    [processTableEntry + 9] = 0;
    SP = [processTableEntry + 13];
    ireturn;
  endif;

  // If file not permitted
  if([inodeTableEntry + 4] == EXCLUSIVE) then
    // Checking if current user doesnt own the file
    if([inodeTableEntry + 3] != [processTableEntry + 3]) then
      [retAddr] = -1;
      // Returning to user process
      [processTableEntry + 9] = 0;
      SP = [processTableEntry + 13];
      ireturn;
    endif;
  endif;

  // Calling acquire inode
  multipush(R0, R1, R2, R3, R4, R5, R6);
  R1 = 4;
  R2 = inodeIndex;
  R3 = [SYSTEM_STATUS_TABLE + 1];
  call MOD_0;
  multipop(R0, R1, R2, R3, R4, R5, R6);

  // Checking if file is open - cannot delete
  if([FILE_STATUS_TABLE + inodeIndex*4 + 1] != -1) then
    // Calling release inode
    multipush(R0, R1, R2, R3, R4, R5, R6);
    R1 = 5;
    R2 = inodeIndex;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R0, R1, R2, R3, R4, R5, R6);

    [retAddr] = -2;
    // Returning to user process
    [processTableEntry + 9] = 0;
    SP = [processTableEntry + 13];
    ireturn;
  endif;

  // Invalidating inode entry
  [inodeTableEntry + 1] = -1;
  // Invalidating root file entry
  [ROOT_FILE + inodeIndex*8] = -1;

  // Calling release inode
  multipush(R0, R1, R2, R3, R4, R5, R6);
  R1 = 5;
  R2 = inodeIndex;
  R3 = [SYSTEM_STATUS_TABLE + 1];
  call MOD_0;
  multipop(R0, R1, R2, R3, R4, R5, R6);

  [retAddr] = 0;
  // Returning to user process
  [processTableEntry + 9] = 0;
  SP = [processTableEntry + 13];
  ireturn;
endif;

