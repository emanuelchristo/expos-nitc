// INT 5 - OPEN, CLOSE

alias sysCallNum R0;
alias arg1 R1;
alias retAddr R2;

// Extracting arguments from stack
sysCallNum = [[PTBR + 2*(SP-5)/512]*512 + (SP-5)%512];
arg1 = [[PTBR + 2*(SP-4)/512]*512 + (SP-4)%512];
retAddr = [PTBR + 2*(SP-1)/512]*512 + (SP-1)%512;

alias processTableEntry R3;
processTableEntry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

alias PPRT R4;
PPRT = [processTableEntry + 11]*512 + RESOURCE_TABLE_OFFSET;

// Setting mode flag
[processTableEntry + 9] = sysCallNum;

// Switching to kernel stack
[processTableEntry + 13] = SP;
SP = [processTableEntry + 11]*512 - 1;

// OPEN
if(sysCallNum == 2) then
  alias fileName R1;

  // Finding free entry in per process resource table
  R5 = 0;
  while(R5 < 8) do
    if([PPRT + 2*R5] == -1) then
      break;
    endif;
    R5 = R5 + 1;
  endwhile;
  // No free entry
  if(R5 == 8) then
    [retAddr] = -3;
    // Returning to user process
    [processTableEntry + 9] = 0;
    SP = [processTableEntry + 13];
    ireturn;
  endif;

  alias indexPPRT R5;

  // Calling open in file manager module
  multipush(R0, R1, R2, R3, R4, R5);
  R2 = fileName;
  R1 = 3;
  call MOD_3;
  alias fileTableIndex R6;
  fileTableIndex = R0;
  multipop(R0, R1, R2, R3, R4, R5);
  if(fileTableIndex < 0) then
    [retAddr] = fileTableIndex;
    // Returning to user process
    [processTableEntry + 9] = 0;
    SP = [processTableEntry + 13];
    ireturn;
  endif;

  [PPRT + 2*indexPPRT] = FILE;
  [PPRT + 2*indexPPRT] = fileTableIndex;

  [retAddr] = indexPPRT;
  // Returning to user process
  [processTableEntry + 9] = 0;
  SP = [processTableEntry + 13];
  ireturn;
endif;

// CLOSE
if(sysCallNum == 3) then
  alias fileDescriptor R1;

  // Invalid file descriptor
  if(fileDescriptor < 0 || fileDescriptor >= 8) then
    [retAddr] = -1;
    // Returning to user process
    [processTableEntry + 9] = 0;
    SP = [processTableEntry + 13];
    ireturn;
  endif;

  // If per process resource table entry is not of type FILE
  if([PPRT + fileDescriptor*2] != FILE) then
    [retAddr] = -1;
    // Returning to user process
    [processTableEntry + 9] = 0;
    SP = [processTableEntry + 13];
    ireturn;
  endif;

  alias openFileIndex R5;
  openFileIndex = [PPRT + fileDescriptor*2 + 1];

  // Calling close in file manager module
  multipush(R0, R1, R2, R3, R4, R5);
  R1 = 4;
  R2 = openFileIndex;
  call MOD_3;
  multipop(R0, R1, R2, R3, R4, R5);

  // Invalidating per process resource table entry
  [PPRT + fileDescriptor*2] = -1;

  [retAddr] = 0;
  // Returning to user process
  [processTableEntry + 9] = 0;
  SP = [processTableEntry + 13];
  ireturn;
endif;


