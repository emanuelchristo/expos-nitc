// INT 9 - EXEC SYS CALL

// Counting switch to kernel mode
[SYSTEM_STATUS_TABLE + 6] = [SYSTEM_STATUS_TABLE + 6] + 1;

// Setting mode flag
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9;

// Extracting arguments
alias retAddr R0;
alias fileName R1;
retAddr = [PTBR + 2*(SP-1)/512]*512 + (SP-1)%512;
fileName = [[PTBR + 2*(SP-2)/512]*512 + (SP-2)%512];

// Switching to kernel stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;

// Searching inode table for file
alias inodeIndex R2;
inodeIndex = 0;
while(inodeIndex < MAX_FILE_NUM) do
  if([INODE_TABLE + inodeIndex*16 + 1] == fileName && [INODE_TABLE + inodeIndex*16 + 0] == EXEC) then
    break;
  endif;
  inodeIndex = inodeIndex + 1;
endwhile;

// If file not found
if(inodeIndex == MAX_FILE_NUM) then
  [retAddr] = -1;
  // Setting mode flag
  [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
  SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
  ireturn;
endif;

// Calling exit process
multipush(R0, R1, R2);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
multipop(R0, R1, R2);

// Reacquring user area page
alias userAreaPage R3;
userAreaPage = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11];
[MEMORY_FREE_LIST + userAreaPage] = [MEMORY_FREE_LIST + userAreaPage] + 1;
// Decrementing MEM_FREE_COUNT in system status table
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

SP = userAreaPage*512 - 1;

// Setting per process resource table
R4 = 0;
while(R4 < 8) do
  [userAreaPage*512 + 510 - R4*2] = -1;
  R4 = R4 + 1;
endwhile;

// Setting inode index in process table
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7] = inodeIndex;
// Setting process state
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = RUNNING;

// PAGE TABLE setup

// Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// Heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

// Getting free page
multipush(R0, R1, R2, R3);
R1 = 1;

// Stack
call MOD_2;
[PTBR + 16] = R0;
[PTBR + 17] = "0110";
call MOD_2;
[PTBR + 18] = R0;
[PTBR + 19] = "0110";

multipop(R0, R1, R2, R3);

// Allocating first code page
multipush(R0, R1, R2, R3);
R4 = inodeIndex;
R1 = 5;
R2 = [INODE_TABLE + R4*16 + 8];
call MOD_2;
[PTBR + 8] = R0;
[PTBR + 9] = "0100";
// Invalidating rest of code pages
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
multipop(R0, R1, R2, R3);

// Setting up disk map table
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 2] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 3] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 4] = [INODE_TABLE + inodeIndex*16 + 8];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 5] = [INODE_TABLE + inodeIndex*16 + 9];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 6] = [INODE_TABLE + inodeIndex*16 + 10];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 7] = [INODE_TABLE + inodeIndex*16 + 11];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 8] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 9] = -1;

// Set entry point IP value from header of code to top of user stack
[[PTBR + 16] * 512] = [[PTBR + 8]*512 + 1];

// Switching to user stack
SP = 8*512;

// Setting mode flag
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;

ireturn;