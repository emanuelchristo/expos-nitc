// INT 8 - FORK

alias sysCallNum R0;
alias retAddr R1;

// Extracting arguments from stack
sysCallNum = [[PTBR + 2*(SP-5)/512]*512 + (SP-5)%512];
retAddr = [PTBR + 2*(SP-1)/512]*512 + (SP-1)%512;

alias processTableEntry R2;
processTableEntry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

// Setting mode flag
[processTableEntry + 9] = sysCallNum;

// Switching to kernel stack
[processTableEntry + 13] = SP;
SP = [processTableEntry + 11]*512 - 1;

// Calling GET PCB ENTRY
multipush(R0, R1, R2);
R1 = GET_PCB_ENTRY;
call MOD_1;
alias newPID R3;
newPID = R0;
multipop(R0, R1, R2);

// No new pcb entry available
if(newPID == -1) then
  [retAddr] = -1;
  // Returning to user process
  [processTableEntry + 9] = 0;
  SP = [processTableEntry + 13];
  ireturn;
endif;

// If heap pages not allocated for parent - allocate 2 pages now
if([PTBR + 4] == -1) then
  // Calling GET FREE PAGE
  multipush(R0, R1, R2, R3);
  R1 = GET_FREE_PAGE;
  call MOD_2;
  [PTBR + 4] = R0;
  [PTBR + 5] = "1110";
  R1 = GET_FREE_PAGE;
  call MOD_2;
  [PTBR + 6] = R0;
  [PTBR + 7] = "1110";
  multipop(R0, R1, R2, R3);
endif;

alias newPageTableEntry R4;
newPageTableEntry = PAGE_TABLE_BASE + newPID*20;

// Allocating stack and user area page for child process
multipush(R0, R1, R2, R3, R4);
R1 = GET_FREE_PAGE;
call MOD_2;
multipush(R0);
R1 = GET_FREE_PAGE;
call MOD_2;
multipush(R0);
R1 = GET_FREE_PAGE;
call MOD_2;
multipush(R0);
multipop(R0, R1, R2, R3, R4, R5, R6, R7);

// Stack pages
[newPageTableEntry + 16] = R5;
[newPageTableEntry + 17] = "0110";
[newPageTableEntry + 18] = R6;
[newPageTableEntry + 19] = "0110";

alias newProcessTableEntry R5;
newProcessTableEntry = PROCESS_TABLE + newPID*16;

// User area page
[newProcessTableEntry + 11] = R7;

// Setting up child process table
[newProcessTableEntry] = 0; // Tick
[newProcessTableEntry + 2] = [SYSTEM_STATUS_TABLE + 1]; // PPID
[newProcessTableEntry + 3] = [processTableEntry + 3]; // User ID
[newProcessTableEntry + 4] = CREATED; // State
[newProcessTableEntry + 6] = [processTableEntry + 6]; // Swap flag
[newProcessTableEntry + 7] = [processTableEntry + 7]; // Inode index
[newProcessTableEntry + 9] = 0; // Mode flag
[newProcessTableEntry + 10] = [processTableEntry + 10]; // User area swap status
[newProcessTableEntry + 12] = 0; // KPTR
[newProcessTableEntry + 13] = [processTableEntry + 13]; // UPTR

// Copying parent's per process resource table to child
alias currPPRT R6;
alias newPPRT R7;
currPPRT = [processTableEntry + 11]*512 + RESOURCE_TABLE_OFFSET;
newPPRT = [newProcessTableEntry + 11]*512 + RESOURCE_TABLE_OFFSET;

R8 = 0;
while(R8 < 8) do
  [newPPRT + R8*2] = [currPPRT + R8*2];
  [newPPRT + R8*2 + 1] = [currPPRT + R8*2 + 1];

  // If semaphore - increment process count in semaphore table
  if([currPPRT + R8*2] == SEMAPHORE) then
    R9 = SEMAPHORE_TABLE + [currPPRT + R8*2 + 1]*4 + 1;
    [R9] = [R9] + 1;
  endif;

  // If file - increment open instance count
  if([currPPRT + R8*2] == FILE) then
    R9 = OPEN_FILE_TABLE + [currPPRT + R6*2 + 1]*4 + 1;
    [R9 + 1] = [R9 + 1] + 1;
  endif;

  R8 = R8 + 1;
endwhile;

// Copying parent's per process disk map table to child
R8 = 0;
while(R8 < 10) do
  [DISK_MAP_TABLE + newPID*10 + R8] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + R8];
  R8 = R8 + 1;
endwhile;

// Setting up child page table (library, heap, code)
R8 = 0;
while(R8 < 8) do
  [newPageTableEntry + 2*R8] = [PTBR + 2*R8];
  [newPageTableEntry + 2*R8 + 1] = [PTBR + 2*R8 + 1];
  [MEMORY_FREE_LIST + [PTBR + 2*R8]] = [MEMORY_FREE_LIST + [PTBR + 2*R8]] + 1;
  R8 = R8 + 1;
endwhile;

// Copying parent stack to user stack
R8 = 0;
while(R8 < 512) do
  [[newPageTableEntry + 16]*512 + R8] = [[PTBR + 16]*512 + R8];
  [[newPageTableEntry + 18]*512 + R8] = [[PTBR + 18]*512 + R8];
  R8 = R8 + 1;
endwhile;

// Setting BP to top of child kernel stack
[[newProcessTableEntry + 11]*512] = BP;

// Switching to user stack
SP = [processTableEntry + 13];
// Setting return value of child process
[[newPageTableEntry + 2*(SP-1)/512]*512 + (SP-1)%512] = 0;

// Setting return value of parent process
[retAddr] = newPID;

// Setting mode flag
[processTableEntry + 9] = 0;

ireturn;
